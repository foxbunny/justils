// Generated by LiveScript 1.2.0
describe('utils.remove', function(){
  var x$;
  x$ = it;
  beforeEach(function(){
    setFixtures("<p id=\"for-removal\"></p>\n<div class=\"for-removal\"></div>\n<div class=\"for-removal\"></div>\n<div class=\"for-removal\"></div>");
  });
  x$('should remove an element', function(){
    utils.remove(utils.byId('for-removal', false));
    expect(utils.byId('for-removal')).not.toExist();
  });
  x$('should remove an array of elements', function(){
    var el;
    utils.remove(utils.byClass('for-removal', document));
    el = utils.byClass;
    expect(el.length).toEqual(0);
  });
});
describe('utils.css', function(){
  var x$;
  x$ = it;
  beforeEach(function(){
    setFixtures("<div id=\"style\"></div>");
  });
  afterEach(function(){
    utils.byId.clearCache();
  });
  x$('should define styles on element', function(){
    var el;
    el = utils.byId('style');
    utils.css('margin', '2px', el);
    expect(el.style.margin).toEqual('2px');
  });
  x$('should normalize style names', function(){
    var el;
    el = utils.byId('style');
    utils.css('margin-right', '4px', el);
    expect(el.style.marginRight).toEqual('4px');
  });
  x$('should not set bogus styles', function(){
    var el;
    el = utils.byId('style');
    utils.css('foo', 'bar', el);
    expect(el.style.foo).not.toBeDefined();
  });
  x$('should be curried', function(){
    var el, padding, hide;
    el = utils.byId('style');
    padding = utils.css('padding');
    hide = utils.css('display', 'none');
    expect(el.style.padding).toEqual('');
    expect(el.style.display).toEqual('');
    padding('12px', el);
    expect(el.style.padding).toEqual('12px');
    expect(el.style.display).toEqual('');
    hide(el);
    expect(el.style.display).toEqual('none');
  });
});
describe('utils.addClass', function(){
  var x$;
  x$ = it;
  beforeEach(function(){
    setFixtures("<p id=\"addclass\"></p>");
  });
  afterEach(function(){
    utils.byId.clearCache();
  });
  x$('should add a class name to element', function(){
    var el;
    el = utils.byId('addclass');
    utils.addClass('foo', el);
    expect(el).toHaveClass('foo');
  });
  x$('should be curried', function(){
    var addBar, el;
    addBar = utils.addClass('bar');
    el = utils.byId('addclass');
    addBar(el);
    expect(el).toHaveClass('bar');
  });
});
describe('utils.removeClass', function(){
  var x$;
  x$ = it;
  beforeEach(function(){
    return setFixtures("<p id=\"removeclass\" class=\"foo bar baz\"></p>");
  });
  afterEach(function(){
    return utils.byId.clearCache();
  });
  x$('should remove class', function(){
    var el;
    el = utils.byId('removeclass');
    utils.removeClass('foo', el);
    expect(el).not.toHaveClass('foo');
    expect(el).toHaveClass('bar');
    expect(el).toHaveClass('baz');
  });
  x$('should be curried', function(){
    var el, removeBaz;
    el = utils.byId('removeclass');
    removeBaz = utils.removeClass('baz');
    removeBaz(el);
    expect(el).not.toHaveClass('baz');
  });
});