// Generated by LiveScript 1.2.0
describe('utils.byId', function(){
  var x$;
  x$ = it;
  beforeEach(function(){
    setFixtures("<p id=\"foo\">inner</p>\n<p id=\"bar\">bar inner</p>\n<p id=\"baz\">baz inner</p>\n<p id=\"nocache\">isn't cached</p>\n<p>not matched</p>");
  });
  x$('should retrieve element by id', function(){
    var el;
    el = utils.byId('foo');
    expect(el).toExist();
    expect(el).toHaveId('foo');
    expect(el).toHaveHtml('inner');
  });
  x$('should only call getElementById once for each id', function(){
    spyOn(document, 'getElementById').andCallThrough();
    utils.byId('bar');
    utils.byId('bar');
    utils.byId('baz');
    utils.byId('baz');
    expect(document.getElementById.callCount).toBe(2);
    expect(document.getElementById.argsForCall).toEqual([['bar'], ['baz']]);
  });
  x$('should have a clearCache method on function', function(){
    expect(typeof utils.byId.clearCache).toBe('function');
  });
  x$('should reset cache by calling clearCache', function(){
    spyOn(document, 'getElementById').andCallThrough();
    utils.byId('nocache');
    utils.byId.clearCache();
    utils.byId('nocache');
    expect(document.getElementById.callCount).toBe(2);
    expect(document.getElementById.argsForCall).toEqual([['nocache'], ['nocache']]);
  });
});
describe('utils.byClass', function(){
  var x$;
  x$ = it;
  beforeEach(function(){
    setFixtures("<ul class=\"list\" id=\"first\">\n  <li class=\"list-item\" id=\"1\"></li>\n  <li class=\"list-item\" id=\"2\"></li>\n</ul>\n<ul class=\"list\" id=\"second\">\n  <li class=\"list-item\" id=\"3\"></li>\n  <li class=\"list-item\" id=\"4\"></li>\n</ul>\n<div id=\"mixed\">\n  <p class=\"foo\"></p>\n  <p class=\"bar\"></p>\n  <ul>\n    <li class=\"list-item\"></li>\n    <li class=\"list-item\"></li>\n    <li class=\"list-item\"></li>\n    <li class=\"list-item\"></li>\n  </ul>\n</div>");
  });
  afterEach(function(){
    return utils.byId.clearCache();
  });
  x$('should select elements by class', function(){
    var elems, i$, len$, el;
    elems = utils.byClass('list-item', document);
    expect(elems.length).toEqual(8);
    for (i$ = 0, len$ = elems.length; i$ < len$; ++i$) {
      el = elems[i$];
      expect(el).toExist();
    }
  });
  x$('last argument should limit scope', function(){
    var root, elems;
    root = utils.byId('first');
    elems = utils.byClass('list-item', root);
    expect(elems.length).toEqual(2);
    expect(elems[0]).toHaveId('1');
    expect(elems[1]).toHaveId('2');
    root = utils.byId('second');
    elems = utils.byClass('list-item', root);
    expect(elems.length).toEqual(2);
    expect(elems[0]).toHaveId('3');
    expect(elems[1]).toHaveId('4');
  });
  x$('should be curried', function(){
    var listItems, root, elems;
    listItems = utils.byClass('list-item');
    root = utils.byId('mixed');
    elems = listItems(root);
    expect(elems.length).toEqual(4);
    root = utils.byId('first');
    elems = listItems(root);
    expect(elems.length).toEqual(2);
  });
});