// Generated by LiveScript 1.2.0
describe('just.byId', function(){
  var x$;
  x$ = it;
  beforeEach(function(){
    setFixtures("<p id=\"foo\">inner</p>\n<p id=\"bar\">bar inner</p>\n<p id=\"baz\">baz inner</p>\n<p id=\"nocache\">isn't cached</p>\n<p>not matched</p>\n<p id=\"disabled-caching\"></p>");
  });
  x$('should retrieve element by id', function(){
    var el;
    el = just.byId('foo');
    expect(el).toExist();
    expect(el).toHaveId('foo');
    expect(el).toHaveHtml('inner');
  });
  x$('should only call getElementById once for each id', function(){
    spyOn(document, 'getElementById').andCallThrough();
    just.byId('bar');
    just.byId('bar');
    just.byId('baz');
    just.byId('baz');
    expect(document.getElementById.callCount).toBe(2);
    expect(document.getElementById.argsForCall).toEqual([['bar'], ['baz']]);
  });
  x$('should have a clearCache method on function', function(){
    expect(typeof just.byId.clearCache).toBe('function');
  });
  x$('should reset cache by calling clearCache', function(){
    spyOn(document, 'getElementById').andCallThrough();
    just.byId('nocache');
    just.byId.clearCache();
    just.byId('nocache');
    expect(document.getElementById.callCount).toBe(2);
    expect(document.getElementById.argsForCall).toEqual([['nocache'], ['nocache']]);
  });
  x$('last argument disables caching', function(){
    spyOn(document, 'getElementById').andCallThrough();
    just.byId('disabled-caching', false);
    just.byId('disabled-caching', false);
    expect(document.getElementById.callCount).toBe(2);
    expect(document.getElementById.argsForCall).toEqual([['disabled-caching'], ['disabled-caching']]);
  });
});
describe('just.byClass', function(){
  var x$;
  x$ = it;
  beforeEach(function(){
    setFixtures("<ul class=\"list\" id=\"first\">\n  <li class=\"list-item\" id=\"1\"></li>\n  <li class=\"list-item\" id=\"2\"></li>\n</ul>\n<ul class=\"list\" id=\"second\">\n  <li class=\"list-item\" id=\"3\"></li>\n  <li class=\"list-item\" id=\"4\"></li>\n</ul>\n<div id=\"mixed\">\n  <p class=\"foo\"></p>\n  <p class=\"bar\"></p>\n  <ul>\n    <li class=\"list-item\"></li>\n    <li class=\"list-item\"></li>\n    <li class=\"list-item\"></li>\n    <li class=\"list-item\"></li>\n  </ul>\n</div>");
  });
  afterEach(function(){
    return just.byId.clearCache();
  });
  x$('should select elements by class', function(){
    var elems, res$, i$, len$, e, el;
    elems = just.byClass('list-item', document);
    res$ = [];
    for (i$ = 0, len$ = elems.length; i$ < len$; ++i$) {
      e = elems[i$];
      res$.push(e);
    }
    elems = res$;
    expect(elems.length).toEqual(8);
    for (i$ = 0, len$ = elems.length; i$ < len$; ++i$) {
      el = elems[i$];
      expect(el).toExist();
    }
  });
  x$('last argument should limit scope', function(){
    var root, elems;
    root = just.byId('first');
    elems = just.byClass('list-item', root);
    expect(elems.length).toEqual(2);
    expect(elems[0]).toHaveId('1');
    expect(elems[1]).toHaveId('2');
    root = just.byId('second');
    elems = just.byClass('list-item', root);
    expect(elems.length).toEqual(2);
    expect(elems[0]).toHaveId('3');
    expect(elems[1]).toHaveId('4');
  });
  x$('should be curried', function(){
    var listItems, root, elems;
    listItems = just.byClass('list-item');
    root = just.byId('mixed');
    elems = listItems(root);
    expect(elems.length).toEqual(4);
    root = just.byId('first');
    elems = listItems(root);
    expect(elems.length).toEqual(2);
  });
});
describe('just.byTag', function(){
  var x$;
  x$ = it;
  beforeEach(function(){
    setFixtures("<p></p>\n<p></p>\n<p></p>\n<ul id=\"list\">\n  <li></li>\n  <li></li>\n</ul>\n<ul id=\"other-list\">\n  <li></li>\n  <li></li>\n  <li></li>\n  <li></li>\n</ul>\n<div id=\"top\">\n  <p></p>\n  <p></p>\n  <div id=\"middle\">\n    <p></p>\n    <p></p>\n    <div id=\"bottom\">\n      <p></p>\n      <p></p>\n    </div>\n  </div>\n</div>");
  });
  x$('should select elements by tag name', function(){
    var elems, i$, len$, el;
    elems = just.byTag('P', document);
    expect(elems.length).toEqual(9);
    for (i$ = 0, len$ = elems.length; i$ < len$; ++i$) {
      el = elems[i$];
      expect(el).toExist();
    }
  });
  x$('last argument should limit scope', function(){
    var elems;
    elems = just.byTag('li', just.byId('list'));
    expect(elems.length).toEqual(2);
  });
  x$('should be curried', function(){
    var getP, top, middle, bottom;
    getP = just.byTag('p');
    top = getP(just.byId('top'));
    middle = getP(just.byId('middle'));
    bottom = getP(just.byId('bottom'));
    expect(top.length).toEqual(6);
    expect(middle.length).toEqual(4);
    expect(bottom.length).toEqual(2);
  });
});