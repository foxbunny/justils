// Generated by LiveScript 1.2.0
var define, slice$ = [].slice;
define = function(root){
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    return function(factory){
      var ref$;
      return import$((ref$ = root.just) != null
        ? ref$
        : root.just = {}, factory(function(){
        return root.just;
      }));
    };
  }
}(this);
define(function(require){
  var manipulate, matchClass, matchAttr, matchSelector, matchAll, filter;
  manipulate = require('./manipulate');
  return {
    matchClass: matchClass = curry$(function(name, el){
      if (el == null) {
        return;
      }
      if (manipulate.hasClass(name, el)) {
        return el;
      }
    }),
    matchAttr: matchAttr = curry$(function(name, val, el){
      if (el == null) {
        return;
      }
      if (manipulate.attr(name, el) === val) {
        return el;
      }
    }),
    matchSelector: matchSelector = curry$(function(selector, el){
      var _matches, i$, ref$, len$, node;
      if (el == null) {
        return;
      }
      _matches = el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector;
      if (_matches != null) {
        if (_matches.call(el, selector)) {
          return el;
        }
      } else {
        for (i$ = 0, len$ = (ref$ = el.parentNode.querySelectorAll(selector)).length; i$ < len$; ++i$) {
          node = ref$[i$];
          if (node === el) {
            return el;
          }
        }
      }
    }),
    matchAll: matchAll = curry$(function(arg$, el){
      var first, rest;
      first = arg$[0], rest = slice$.call(arg$, 1);
      if (el == null) {
        return;
      }
      if (first == null) {
        return el;
      }
      return matchAll(rest, first(el));
    }),
    filter: filter = curry$(function(matchers, elements){
      var i$, len$, el, results$ = [];
      if (!(matchers != null && matchers.length) || !(elements != null && elements.length)) {
        return;
      }
      for (i$ = 0, len$ = elements.length; i$ < len$; ++i$) {
        el = elements[i$];
        if (matchAll(matchers, el)) {
          results$.push(el);
        }
      }
      return results$;
    })
  };
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}