// Generated by LiveScript 1.2.0
var define, toString$ = {}.toString;
define = function(root){
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    return function(factory){
      var ref$;
      return import$((ref$ = root.utils) != null
        ? ref$
        : root.utils = {}, factory(function(){
        return root.utils;
      }));
    };
  }
}(this);
define(function(require){
  var helpers, remove, css, addClass, removeClass, hasClass, data, setData, attr, setAttr, hasAttr;
  helpers = require('./helpers');
  return {
    remove: remove = function(el){
      var i$, len$, e;
      if (el == null) {
        return;
      }
      if (el.length) {
        for (i$ = 0, len$ = el.length; i$ < len$; ++i$) {
          e = el[i$];
          remove(e);
        }
      } else {
        el.parentNode.removeChild(el);
      }
    },
    css: css = curry$(function(property, value, el){
      property = helpers.camelize(property);
      if (el.style[property] != null) {
        el.style[property] = value;
      }
    }),
    addClass: addClass = curry$(function(name, el){
      if (toString$.call(name).slice(8, -1) === 'Array') {
        name = name.join(' ');
      }
      if (el.className.length) {
        el.className += " " + name;
      } else {
        el.className += name;
      }
    }),
    removeClass: removeClass = curry$(function(name, el){
      var re;
      if (toString$.call(name).slice(8, -1) === 'String') {
        name = name.split(' ');
      }
      if (name.length > 1) {
        re = RegExp(" ?(" + name.join('|') + ")", 'g');
      } else {
        re = RegExp(" ?" + name, 'g');
      }
      el.className = el.className.replace(re, '');
    }),
    hasClass: hasClass = curry$(function(name, el){
      return (" " + el.className + " ").indexOf(" " + name + " ") > -1;
    }),
    data: data = curry$(function(name, el){
      var ref$;
      return ((ref$ = el.dataset) != null ? ref$[name] : void 8) || el.getAttribute("data-" + name);
    }),
    setData: setData = curry$(function(name, el, value){
      if ('dataset' in el) {
        el.dataset[name] = value;
      } else {
        el.setAttribute("data-" + name, value);
      }
    }),
    attr: attr = curry$(function(name, el){
      return el.getAttribute(name);
    }),
    setAttr: setAttr = curry$(function(name, el, value){
      el.setAttribute(name, value);
    }),
    hasAttr: hasAttr = curry$(function(name, el){
      return el.hasAttribute(name);
    })
  };
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}