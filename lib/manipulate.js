// Generated by LiveScript 1.2.0
var define;
define = function(root){
  var require;
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    require = function(dep){
      return root.utils;
    };
    return function(factory){
      var ref$;
      return import$((ref$ = root.utils) != null
        ? ref$
        : root.utils = {}, factory(require));
    };
  }
}(this);
define(function(require){
  var helpers, remove, css, addClass, removeClass;
  helpers = require('./helpers');
  return {
    remove: remove = function(el){
      var i$, len$, e;
      if (el == null) {
        return;
      }
      if (el.length) {
        for (i$ = 0, len$ = el.length; i$ < len$; ++i$) {
          e = el[i$];
          remove(e);
        }
      } else {
        el.parentNode.removeChild(el);
      }
    },
    css: css = curry$(function(property, value, el){
      property = helpers.camelize(property);
      if (el.style[property] != null) {
        el.style[property] = value;
      }
    }),
    addClass: addClass = curry$(function(name, el){
      if (el.classList != null) {
        el.classList.add(name);
      } else {
        if (el.className.length) {
          el.className += " " + name;
        } else {
          el.className += name;
        }
      }
    }),
    removeClass: removeClass = curry$(function(name, el){
      if (el.classList != null) {
        el.classList.remove(name);
      } else {
        el.className = el.className.replace(RegExp(" ?" + name));
      }
    })
  };
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}