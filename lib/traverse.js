// Generated by LiveScript 1.2.0
var define;
define = function(root){
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    return function(factory){
      var ref$;
      return import$((ref$ = root.utils) != null
        ? ref$
        : root.utils = {}, factory());
    };
  }
}(this);
define(function(){
  var byId, byClass;
  return {
    byId: byId = function(){
      var cache, fn;
      cache = {};
      fn = function(id){
        return cache[id] || (cache[id] = document.getElementById(id));
      };
      fn.clearCache = function(){
        return cache = {};
      };
      return fn;
    }(),
    byClass: byClass = curry$(function(scope, cls){
      return (typeof scope.getElementsByClassName === 'function' ? scope.getElementsByClassName(cls) : void 8) || (typeof scope.querySelectorAll === 'function' ? scope.querySelectorAll("." + cls) : void 8);
    })
  };
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}