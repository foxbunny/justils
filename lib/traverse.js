// Generated by LiveScript 1.2.0
var define;
define = function(root){
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    return function(factory){
      var ref$;
      return import$((ref$ = root.just) != null
        ? ref$
        : root.just = {}, factory());
    };
  }
}(this);
define(function(){
  var byId, byClass, byTag;
  return {
    byId: byId = function(){
      var cache, fn;
      cache = {};
      fn = function(id, doCache){
        doCache == null && (doCache = true);
        if (doCache) {
          return cache[id] || (cache[id] = document.getElementById(id));
        } else {
          return document.getElementById(id);
        }
      };
      fn.clearCache = function(){
        return cache = {};
      };
      return fn;
    }(),
    byClass: byClass = curry$(function(cls, el){
      if (el.getElementsByClassName != null) {
        return el.getElementsByClassName(cls);
      } else {
        return el.querySelectorAll("." + cls);
      }
    }),
    byTag: byTag = curry$(function(name, el){
      return el.getElementsByTagName(name);
    })
  };
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}