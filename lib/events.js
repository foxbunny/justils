// Generated by LiveScript 1.2.0
var define;
define = function(root){
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    return function(factory){
      var ref$;
      return import$((ref$ = root.just) != null
        ? ref$
        : root.just = {}, factory(function(){
        return root.just;
      }));
    };
  }
}(this);
define(function(require){
  var helpers, IS_BUBBLING, IS_CANCELABLE, EVENT_TYPES, trigger;
  helpers = require('./helpers');
  IS_BUBBLING = true;
  IS_CANCELABLE = true;
  return {
    EVENT_TYPES: EVENT_TYPES = {
      blur: 'FocusEvent',
      change: 'Event',
      click: 'MouseEvent',
      dblclick: 'MouseEvent',
      drag: 'DragEvent',
      dragend: 'DragEvent',
      dragenter: 'DragEvent',
      dragleave: 'DragEvent',
      dragover: 'DragEvent',
      dragstart: 'DragEvent',
      drop: 'DragEvent',
      focus: 'FocusEvent',
      keydown: 'KeyboardEvent',
      keypress: 'KeyboardEvent',
      keyup: 'KeyboardEvent',
      mousedown: 'MouseEvent',
      mouseenter: 'MouseEvent',
      mouseleave: 'MouseEvent',
      mousemove: 'MouseEvent',
      mouseout: 'MouseEvent',
      mouseup: 'MouseEvent',
      resize: 'UIEvent',
      scroll: 'UIEvent',
      select: 'UIEvent',
      storage: 'StorageEvent',
      submit: 'Event',
      touchcancel: 'TouchEvent',
      touchen: 'TouchEvent',
      touchenter: 'TouchEvent',
      touchleave: 'TouchEvent',
      touchmove: 'TouchEvent',
      touchstart: 'TouchEvent',
      unload: 'UIEvent'
    },
    trigger: trigger = curry$(function(eventName, el, data){
      var ref$, TEXT, COMMENT, e, type;
      ref$ = helpers.NODE_TYPES, TEXT = ref$.TEXT, COMMENT = ref$.COMMENT;
      if ((ref$ = el.nodeType) === TEXT || ref$ === COMMENT) {
        return;
      }
      if (document.createEventObject != null) {
        e = document.createEventObject();
        import$(e, data);
        return el.fireEvent("on" + eventName, e);
      } else {
        type = EVENT_TYPES[eventName] || 'Event';
        e = document.createEvent(type);
        e.initEvent(eventName, IS_BUBBLING, IS_CANCELABLE);
        if (data != null) {
          import$(e, data);
        }
        return el.dispatchEvent(e);
      }
    })
  };
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}